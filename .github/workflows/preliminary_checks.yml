# Copyright (c) Meta Platforms, Inc. and its affiliates.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Preliminary Checks

on:
  pull_request:
    types:
      - opened
      - reopened
      - edited
      - synchronize

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.repository }}-${{ github.head_ref || github.sha }}
  cancel-in-progress: true

jobs:
  preliminary-checks:
    name: Preliminary Checks
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/facebookincubator/velox-dev:centos9
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          persist-credentials: false

      - name: Configure Git Safe Directory
        run: |
          git config --global --add safe.directory "*"

      - name: Install dependencies
        run: |
          pip3 install regex
          dnf install -y clang-tools-extra

      - name: Check PR Title Format
        env:
          title: '${{ github.event.pull_request.title }}'
        run: |
          python3 -c "
          import re
          import os
          import sys

          title = os.environ['title']
          print(f'Checking PR title: {title}')

          # Conventional commit format: type(scope)?: description
          title_re = r'^(feat|fix|build|test|docs|refactor|misc)(\(.+\))?!?: ([A-Z].+)[^.]$'
          match = re.search(title_re, title)

          if match is None:
            print('::error::Please follow conventional commit guidelines in PR titles:')
            print('::error::Format: type(scope)?: Description')
            print('::error::Types: feat, fix, build, test, docs, refactor, misc')
            print('::error::Example: feat(optimizer): Add new optimization rule')
            print('::error::Example: fix: Fix memory leak in query execution')
            sys.exit(1)
          else:
            print('✓ PR title follows conventional commit format')
          "

      - name: Run Format Check
        run: |
          echo "::group::Format Check - Changed files"
          files=$(git diff --name-only HEAD^1 HEAD)
          echo $files | tr ' ' '\n'
          echo "::endgroup::"
          echo "Running format check..."
          python3 scripts/format-check.py format commit

      - name: Run License Header Check
        run: |
          echo "::group::License Check - Changed files"
          files=$(git diff --name-only HEAD^1 HEAD)
          echo $files | tr ' ' '\n'
          echo "::endgroup::"
          echo "Running license header check..."
          python3 scripts/format-check.py header commit

      - name: Summary
        run: |
          echo "✅ All preliminary checks completed successfully!"
          echo "  ✓ PR title format check"
          echo "  ✓ Code format check"
          echo "  ✓ License header check"
