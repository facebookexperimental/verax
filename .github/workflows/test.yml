# Copyright (c) Meta Platforms, Inc. and its affiliates.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Verax C++ CI

on:
  push:
    branches: [main]
    paths:
      - 'axiom/logical_plan/**'
      - 'axiom/optimizer/**'
      - 'axiom/public_tld/**'
      - '.github/workflows/test.yml'
  pull_request:
    branches: [main]
    paths:
      - 'axiom/logical_plan/**'
      - 'axiom/optimizer/**'
      - 'axiom/public_tld/**'
      - '.github/workflows/test.yml'

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.repository }}-${{ github.head_ref || github.sha }}
  cancel-in-progress: true

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - name: Install pre-commit
        run: python -m pip install pre-commit

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          persist-credentials: false

      - name: Cache pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            pre-commit-

      - name: Run pre-commit
        run: |
          files=$(git diff --name-only HEAD^1 HEAD)
          echo "::group::Changed files"
          echo $files | tr ' ' '\n'
          echo "::endgroup::"
          pre-commit run --show-diff-on-failure --color=always --files $files

  build-and-test:
    runs-on: ubuntu-latest
    needs: pre-commit
    env:
      CPU_TARGET: "avx"
      CCACHE_DIR: ${{ github.workspace }}/ccache

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          submodules: recursive

      - name: Verify submodules
        run: |
          echo "Verifying submodules were properly initialized..."

          # Check if the Velox submodule was initialized correctly
          if [ -d "velox/CMake" ]; then
            echo "Velox submodule properly initialized"
          else
            echo "::error::Failed to initialize Velox submodule with recursive checkout"
            echo "::error::Listing contents of velox directory:"
            ls -la velox || echo "velox directory does not exist"
            exit 1
          fi

      - name: Setup ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-ubuntu-${{ hashFiles('CMakeLists.txt', 'axiom/logical_plan/**/*.cpp', 'axiom/logical_plan/**/*.h', 'axiom/optimizer/**/*.cpp', 'axiom/optimizer/**/*.h') }}
          restore-keys: |
            ccache-ubuntu-

      - name: Install dependencies
        run: |
          sudo apt-get update

          # Install dependencies
          sudo apt-get install -y cmake build-essential ccache \
            libboost-all-dev \
            libgtest-dev libgmock-dev libgoogle-glog-dev libgflags-dev \
            libdouble-conversion-dev libfmt-dev libssl-dev libzstd-dev libevent-dev \
            libsnappy-dev flex bison libfl-dev libatomic1 \
            libunwind-dev libsodium-dev

          # Debug Boost installation
          echo "Installed Boost packages:"
          dpkg -l | grep libboost

          echo "Boost include directory contents:"
          ls -la /usr/include/boost || echo "Boost include directory not found"

      - name: Install FastFloat
        run: |
          # Clone and build FastFloat
          git clone --depth 1 --branch v8.0.2 https://github.com/fastfloat/fast_float.git
          cd fast_float

          # Create build directory
          mkdir -p _build && cd _build

          # Configure with CMake
          cmake -DBUILD_TESTS=OFF ..

          # Build and install
          make -j$(nproc)
          sudo make install

          # Update library cache
          sudo ldconfig

      - name: Install Folly
        run: |
          # Clone and build Folly with the version expected by Velox
          git clone --depth 1 --branch v2025.04.28.00 https://github.com/facebook/folly.git
          cd folly

          # Create build directory
          mkdir -p _build && cd _build

          # Configure with CMake with options matching Velox's Folly build
          cmake -DBUILD_SHARED_LIBS=ON \
                -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
                -DCMAKE_CXX_FLAGS="-DFOLLY_HAVE_INT128_T=1 -DFOLLY_CFG_NO_COROUTINES" \
                -DCMAKE_BUILD_TYPE=Release \
                -DFOLLY_HAVE_INT128_T=ON \
                ..

          # Build and install
          make -j$(nproc)
          sudo make install

          # Update library cache
          sudo ldconfig

          # Verify that the library was installed correctly
          ls -la /usr/local/lib/libfolly*

      - name: Zero ccache statistics
        run: ccache -z

      - name: Configure CMake
        run: |
          # Clean the build directory if it exists
          rm -rf build
          # Configure CMake
          cmake -S . -B build -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

      - name: Build
        run: cmake --build build --config Release -j 2 --verbose

      - name: Show ccache statistics
        run: ccache -s

      - name: Run tests
        run: ctest --test-dir build --output-on-failure -j $(nproc)
